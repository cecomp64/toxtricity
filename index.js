// Generated by CoffeeScript 2.5.1
(function() {
  // tox-bot

  // Objectives
  //   - Enable bot in certain channels only to avoid spam
  //     - r! tox-bot enable
  //   - Assign a role from emoji reaction
  //     - Message should indicate role-emoji dictionary
  //     - Also create the role
  //       - guild.roles.create({ data: { name: 'Mod', permissions: ['MANAGE_MESSAGES', 'KICK_MEMBERS'] } });
  //   - Assign a role when users say something for the first time in a channel
  //     - i.e. Say hi in board-games to be added to @board-games
  //     - Enable when an admin gives a command r! chat-role <role>
  //     - Also create the role
  //   - Quotes
  //     - Access the quotebook via API for a random quote
  //     - Band names
  var Discord, client, my_id, print_reaction, secret;

  Discord = require('discord.js-light');

  client = new Discord.Client();

  secret = process.env.DISCORD_TOKEN;

  my_id = 1234;

  print_reaction = function(emoji, user, author) {
    console.log("Reaction of " + emoji + " from " + user.username + " on " + author.username + "'s message!");
    return message.channel.send("Reaction of " + emoji + " from " + user.username + " on " + author.username + "'s message!");
  };

  // Hola, mundo
  client.once('ready', () => {
    return console.log('Ready!');
  });

  client.login(secret);

  // Events
  // https://gist.github.com/koad/316b265a91d933fd1b62dddfcc3ff584
  // messageReactionAdd
  client.on("messageReactionAdd", (messageReaction, user) => {
    var channel, message;
    // In discord.js-light, message is a *partial* (just ID)
    //  channel.messages.fetch(id)
    message = messageReaction.message;
    channel = message.channel;
    console.log(`Message partial: ${message.partial}`);
    // Fetch that message... always?
    if (message.partial) {
      console.log(`Message ID: ${message.id}`);
      return channel.messages.fetch(message.id).then(function(message) {
        var author, emoji;
        author = message.author;
        console.log(`Author: ${author}`);
        emoji = messageReaction.emoji.name;
        return user = messageReaction.users.fetch().then(function(users) {
          user = users.first();
          return print_reaction(emoji, user, author);
        });
      });
    }
  });

  // Message format:
  //  Some text instructions
  client.on("message", (message) => {
    return console.log(message.content);
  });

}).call(this);
